import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'com.github.ben-manes.versions' version '0.49.0'
    id 'org.kordamp.gradle.markdown' version '2.2.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    version = '0.8.3.3'
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'https://repo.spring.io/release' }
    maven { url 'https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/' }
}

dependencies {
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation 'org.postgresql:postgresql:42.7.2'

    // https://mvnrepository.com/artifact/net.sf.jasperreports/jasperreports
    implementation 'net.sf.jasperreports:jasperreports:6.21.2'

    // google roboto font (https://github.com/google/roboto/releases) package for jasper reports
    // howto: https://community.jaspersoft.com/wiki/custom-font-font-extension
    implementation files('libs/google-roboto-2.138.jar')

    // https://mvnrepository.com/artifact/org.swinglabs.swingx/swingx-all
    implementation 'org.swinglabs.swingx:swingx-all:1.6.5-1'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // https://mvnrepository.com/artifact/com.github.jiconfont/jiconfont-swing
    implementation 'com.github.jiconfont:jiconfont-swing:1.0.1'

    // https://mvnrepository.com/artifact/com.github.jiconfont/jiconfont-font_awesome
    implementation 'com.github.jiconfont:jiconfont-font_awesome:4.7.0.1'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-c3p0
    implementation 'org.hibernate:hibernate-c3p0:5.6.15.Final'

    // https://mvnrepository.com/artifact/com.mchange/c3p0
    implementation 'com.mchange:c3p0:0.9.5.5'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'

    // https://mvnrepository.com/artifact/com.github.lgooddatepicker/LGoodDatePicker
    implementation 'com.github.lgooddatepicker:LGoodDatePicker:11.2.1'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    implementation 'org.apache.poi:poi:5.2.5'

    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-jpamodelgen
    compileOnly 'org.hibernate:hibernate-jpamodelgen:6.2.7.Final'
    annotationProcessor group: 'org.hibernate', name: 'hibernate-jpamodelgen', version: '6.2.7.Final'
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

jar {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    manifest {
        attributes 'SplashScreen-Image': 'splash.png',
                'Implementation-Title': 'ProMaSy',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'com.github.andriilab.promasy.App',
                'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' ')
    }

    doFirst {
        copy {
            from configurations.runtimeClasspath
            into layout.buildDirectory.dir('libs/lib')
        }
    }

    doLast {
        copy {
            from 'reports'
            include '*.jrxml'
            into layout.buildDirectory.dir('libs/reports')
        }
    }
}

tasks.register('createVersionProperties') {
    dependsOn processResources
    doFirst {
        SimpleDateFormat format = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
        new File('src/main/resources/PromasyVersion.properties').withWriter { w ->
            Properties p = new Properties()
            p.setProperty('versionNumber', project.version.toString())
            p.setProperty('buildDate', format.format(Calendar.getInstance().getTime()))
            p.store w, null
        }
        copy {
            from 'src/main/resources/PromasyVersion.properties'
            into layout.buildDirectory.dir('resources/main')
        }
    }
}

tasks.register('setConsoleCyrillicSupport') {
    dependsOn processResources
    doLast {
        Properties props = new Properties()
        File propsFile = layout.buildDirectory.file('/resources/main/log4j2.properties').get().asFile
        props.load(propsFile.newDataInputStream())
        props.setProperty('appender.console.encoding', 'CP866')
        props.store(propsFile.newWriter(), null)
    }
}

tasks.register('writePackages') {
    dependsOn processResources
    File pkgsFile = new File('src/markdown/PACKAGES.md')
    pkgsFile.write("# Packages used in ProMaSy $project.version build\n\n")
    pkgsFile.append('|Name|Version|\n')
    pkgsFile.append('|---|---|\n')
    configurations.compileClasspath
            .collect { it.name }
            .sort(false, String.CASE_INSENSITIVE_ORDER)
            .each {
                String pkgName = it.find('^.+?(?=-\\d)')
                String pkgVersion = it.substring(pkgName.length() + 1, it.length() - 4)
                pkgsFile.append("|$pkgName|$pkgVersion|\n")
            }
}

tasks.register('convertMarkdown') {
    dependsOn processResources
    markdownToHtml.tables = true
    markdownToHtml.sourceDir = project.file('src/markdown')
    markdownToHtml.outputDir = project.file('src/main/resources')
    convertMarkdown.finalizedBy markdownToHtml
}

classes {
    dependsOn writePackages
    dependsOn convertMarkdown
    dependsOn createVersionProperties
    dependsOn setConsoleCyrillicSupport
}